#!/bin/bash
#set -x

PORT=
DNS=
VOLUME=
ENV=
IMAGE=
HOST_NAME=
CONT_NAME=
[ -f "docker-run.conf" ] && DOCKER_RUN_CONF="docker-run.conf"
RUN_COMMAND=
RUNTMP_COMMAND=
ATTACH_COMMAND=

DOQUER_LOCK_FILE=/var/lib/doquer/doquer_containers
DOCKER_EXECDRIVE_DIR=/var/lib/docker/execdriver/native

set_docker_vars() {
	local tmp_arg=$( mktemp )
	if [[ -d "$1" ]]; then
		#is a directory
		DOCKER_RUN_CONF=$(dirname ${1})/${DOCKER_RUN_CONF}
		shift
	elif [[ -f "$1" ]]; then
		#is a file
		DOCKER_RUN_CONF="$1"
		shift
	fi
	[ -f ${DOCKER_RUN_CONF} ] && source ${DOCKER_RUN_CONF}
	echo "${*:1}" > ${tmp_arg} && source ${tmp_arg}
}

getcontainerid() {
	echo $(docker inspect --format='{{.ID}}' ${1})
}

getcontainerImageid() {
	echo $(docker inspect --format='{{.Image}}' ${1})
}

getimageid() {
	echo $(docker inspect --format='{{.id}}' ${1})
}

islockedcontainer() {
	if grep -q ${1:0:12} ${DOQUER_LOCK_FILE}; then
		true
	else
		false
	fi
}

jeff_bridge() {
	local bridge=$(docker inspect --format='{{.Config.Env}}' ${1} | grep -Po 'BRIDGED=([^\s]*)')
	[ ${bridge} ] && {
		bridge="${bridge#BRIDGED=}"
		[ ${bridge} ] && echo ${bridge}
	}
}

help_lock() {
	echo "Usage: doquer lock CONTAINER"
	echo
	echo "Lock container, add to locked list, one by one"
	echo
}

help_unlock() {
	echo "Usage: doquer unlock CONTAINER"
	echo
	echo "Unlock container, remove from locked list"
	echo
}

help_integrity() {
	echo "Usage: doquer integrity"
	echo
	echo "Check integrity of locked list"
	echo
}

help_show() {
	echo "Usage: doquer show [OPTIONS]"
	echo
	echo "Show locked container´s"
	echo
	echo "	-q Only display numeric IDs"
	echo
}

help_rm() {
	echo "Usage: doquer rm CONTAINER´s"
	echo
	echo "Remove container´s consistently"
	echo
}

help_rmall() {
	echo "Usage: doquer rmall"
	echo
	echo "Remove all unlocked container´s"
	echo
}

help_rmi() {
	echo "Usage: doquer rmi IMAGE´s"
	echo
	echo "Remove image´s consistently"
	echo
}

help_rmiall() {
	echo "Usage: doquer rmiall"
	echo
	echo "Remove all untagged <none> image"
	echo
}

help_build() {
	echo "Usage: doquer build [path|args...]"
	echo
	echo "Build a container from a configuration file"
	echo
}

help_cleanbuild() {
	echo "Usage: doquer cleanbuild [path|args...]"
	echo
	echo "Perform \"rmiall\" and delete IMAGE from configuration file"
	echo
}

help_run() {
	echo "Usage: doquer run [OPTIONS] [path|args...]"
	echo
	echo "Run a background container from a configuration file"
	echo
	echo "	--pipe Use pipework for running container"
	echo
	echo "	 Ex: doquer run docker-run-test.conf ENV='"-e PASSWORD=root"' PORT='"-p 8008:80"'"
	echo
}

help_runtmp() {
	echo "Usage: doquer runtmp [path|args...]"
	echo
	echo "Run a temporal container from a configuration file"
	echo
	echo "	--pipe Use pipework for running container"
	echo
}

help_conf() {
	echo "Usage: doquer conf [path|args...]"
	echo
	echo "Get configuration file"
	echo
	echo "	Ex: doquer conf /home/test/samba"
	echo
}

help_attach() {
	echo "Usage: doquer attach CONTAINER [COMMAND]"
	echo
	echo "Attach to a running container and run comman´d"
	echo
}

help_start() {
	echo "Usage: doquer start CONTAINER´s"
	echo
	echo "Start stopped container´s"
	echo
}

case "$1" in
	lock)
		if [ "$2" == "-h" ] || [ "$2" == "--help" ]; then
			help_lock
			exit 1
		fi
		for contid in ${*:2}; do
			contid=$(getcontainerid ${contid}) && [ ${contid} ] || exit 1
			contid=${contid:0:12}
			if islockedcontainer ${contid}; then
				echo "${contid} -- already locked."
				exit 1
			fi
			echo "${contid}" >> ${DOQUER_LOCK_FILE}
		done
		;;
	unlock)
		if [ "$2" == "-h" ] || [ "$2" == "--help" ]; then
			help_unlock
			exit 1
		fi
		for contid in ${*:2}; do
			contid=$(getcontainerid ${contid}) && [ ${contid} ] || exit 1
			contid=${contid:0:12}
			if islockedcontainer ${contid}; then
				# removefromlist
				sed -i "/${contid}/d" ${DOQUER_LOCK_FILE}
			else
				echo "${contid} -- isn´t on locked list."
				exit 1
			fi
		done
		;;
	integrity)
		if [ "$2" == "-h" ] || [ "$2" == "--help" ]; then
			help_integrity
			exit 1
		fi
		contexclude=$(cat ${DOQUER_LOCK_FILE})
		for i in ${contexclude}; do
			if ! docker inspect ${i} 1>/dev/null 2>&1; then
				# removefromlist
				sed -i "/${i}/d" ${DOQUER_LOCK_FILE}
			fi
		done
		;;
	show)
		if [ "$2" == "-h" ] || [ "$2" == "--help" ]; then
			help_show
			exit 1
		fi
		if [ "$2" == "-q" ]; then
			echo $(cat ${DOQUER_LOCK_FILE})
		else
			docker ps -a | grep -e "IMAGE" -f ${DOQUER_LOCK_FILE}
		fi
		;;
	rm)
		if [ "$2" == "-h" ] || [ "$2" == "--help" ]; then
			help_rm
			exit 1
		fi
		for contid in ${*:2}; do
			contid=$(getcontainerid ${contid}) && [ ${contid} ] || exit 1
			if islockedcontainer ${contid}; then
				echo "${contid:0:12} -- is on locked list."
				exit 1
			else
				NSPID=$(docker inspect --format='{{.State.Pid}}' ${contid})
				bridge=$(jeff_bridge ${contid})
				docker rm -f ${contid}
				[ ${bridge} ] && {
					bridges=$(ifconfig | grep -Po "pl${NSPID}[a-zA-Z0-9]+")
					sudo rm -f /var/run/netns/$NSPID
					sudo rm -fr /proc/$NSPID
					for i in ${bridges}; do
						sudo ip link delete ${i}
					done
				}
			fi
		done
		;;
	rmall)
		if [ "$2" == "-h" ] || [ "$2" == "--help" ]; then
			help_rmall
			exit 1
		fi
		allcontainers=($(docker ps -a -q))
		for contid in ${allcontainers[@]}; do
			if islockedcontainer ${contid}; then
				allcontainers=(${allcontainers[@]//*$contid*})
			fi
		done
		allcontainers=$(echo ${allcontainers[*]}) # array to var
		doquer rm ${allcontainers}
		;;
	rmi)
		if [ "$2" == "-h" ] || [ "$2" == "--help" ]; then
			help_rmi
			exit 1
		fi
		allcontainers=$(docker ps -a -q)
		for imageid in ${*:2}; do
			imageid=$(getimageid ${imageid})
			for contid in ${allcontainers}; do
				contimageid=$(getcontainerImageid ${contid})
				if [ "${contimageid}" == "${imageid}" ] ; then
					if ! doquer rm ${contid}; then exit 1; fi
				fi
			done
			docker rmi -f ${imageid}
		done
		;;
	rmiall)
		if [ "$2" == "-h" ] || [ "$2" == "--help" ] ; then
			help_rmiall
			exit 1
		fi
		doquer rmi $(docker images | grep '<none>' | awk '{print $3}')
		;;
	build)
		if [ "$2" == "-h" ] || [ "$2" == "--help" ]; then
			help_build
			exit 1
		fi
		if ! [ $(id -u) = 0 ]; then
			sudo "$0" "$*"
			exit 0
		fi
		set_docker_vars "${*:2}"
		docker_image_dir=$(dirname ${DOCKER_RUN_CONF})
		[ "$(ls -A ${docker_image_dir}/usr 2>/dev/null)" ] && chmod 755 ${docker_image_dir}/usr/*
		[ "$(ls -A ${docker_image_dir}/conf 2>/dev/null)" ] && chmod 644 ${docker_image_dir}/conf/*
		docker build \
			--rm \
			-t ${IMAGE} \
			${docker_image_dir}
		;;
	cleanbuild)
		if [ "$2" == "-h" ] || [ "$2" == "--help" ]; then
			help_cleanbuild
			exit 1
		fi
		set_docker_vars "${*:2}"
		doquer rmiall
		doquer rmi ${IMAGE}
		;;
	run)
		if [ "$2" == "-h" ] || [ "$2" == "--help" ]; then
			help_run
			exit 1
		fi
		if [ "$2" == "--pipe" ]; then
			pipeflag="true"
			shift
		fi
		set_docker_vars "${*:2}"
		if [ ${pipeflag} ]; then
			bridge=$(echo "${ENV}" | grep -Po 'BRIDGED=([^\s]*)')
			[ ${bridge} ] && {
				# remove "BRIDGED="" string
				bridge="${bridge#BRIDGED=}"
				PORT=""
			}
		else
			ENV=$(echo "${ENV}" | perl -pe 's/-e +BRIDGED=.*?\s//')
		fi
		if ! docker inspect ${IMAGE} 1>/dev/null 2>&1; then
			doquer build
		fi
		contid=$(docker run \
			-d \
			-t \
			${ENV} \
			${HOST_NAME} \
			${CONT_NAME} \
			${PORT} \
			${DNS} \
			${VOLUME} \
			${IMAGE} \
			${RUN_COMMAND} \
		)
		[ ${pipeflag} ] && [ ${bridge} ] && sudo pipework br0 ${contid} ${bridge}
		echo  ${contid}
		;;
	runtmp)
		if [ "$2" == "-h" ] || [ "$2" == "--help" ] ; then
			help_runtmp
			exit 1
		fi
		if [ "$2" == "--pipe" ] ; then
			pipeflag=1
			shift
		fi
		set_docker_vars "${*:2}"
		docker run \
			--rm -t -i \
			${ENV} \
			${HOST_NAME} \
			${CONT_NAME} \
			${PORT} \
			${DNS} \
			${VOLUME} \
			${IMAGE} \
			${RUNTMP_COMMAND}
		;;
	conf)
		if [ "$2" == "-h" ] || [ "$2" == "--help" ] ; then
			help_conf
			exit 1
		fi
		set_docker_vars "${*:2}"
		echo "PORT=${PORT}"
		echo "DNS=${DNS}"
		echo "VOLUME=${VOLUME}"
		echo "ENV=${ENV}"
		echo "IMAGE=${IMAGE}"
		echo "HOST_NAME=${HOST_NAME}"
		echo "CONT_NAME=${CONT_NAME}"
		echo "DOCKER_RUN_CONF=${DOCKER_RUN_CONF}"
		echo "RUN_COMMAND=${RUN_COMMAND}"
		echo "RUNTMP_COMMAND=${RUNTMP_COMMAND}"
		echo "ATTACH_COMMAND=${ATTACH_COMMAND}"
		;;
	attach)
		if [ "$2" == "-h" ] || [ "$2" == "--help" ] ; then
			help_attach
			exit 1
		fi
		if ! which nsinit > /dev/null
		then
			echo "\"nsinit\" tool needed, download from: https://github.com/bySabi/my_docker_util/raw/master/conf/nsinit"
			exit 1
		fi
		contid=$(getcontainerid ${2})
		if sudo test -d ${DOCKER_EXECDRIVE_DIR}/${contid}; then
			nsinit_args=${*:3}
			[ ${nsinit_args} ] || nsinit_args="bash"
			nsinit_exec="nsinit exec ${nsinit_args}"
			sudo bash -c "cd ${DOCKER_EXECDRIVE_DIR}/${contid} && ${nsinit_exec}"
		else
			echo "Not running container"
			exit 1
		fi
		;;
	start)
		if [ "$2" == "-h" ] || [ "$2" == "--help" ] ; then
			help_start
			exit 1
		fi
		for contid in ${*:2}; do
			docker start ${contid}
			bridge=$(jeff_bridge ${contid})
			[ ${bridge} ] && sudo pipework br0 ${i} ${bridge}
		done
		;;
	version)
		echo "VERSION 0.18 __ bySabi"
		;;
	*)
		echo "Usage: doquer COMMAND [arg...]"
		echo 
		echo "Easy live with docker ..."
		echo
		echo "Commands:"
		echo "	lock		Lock container, prevent deletion"
		echo "	unlock		Unlock container"
		echo "	integrity	Check integrity, remove not exist container"
		echo "	show		Show lock container´s"		
		echo "	rm		Remove container consistently"
		echo "	rmall		Remove unlocked container´s"
		echo "	rmi		Remove image´s consistently"
		echo "	rmiall		Remove all untagged <none> image´s"
		echo "	build		Build a container from a configuration file"
		echo "	cleanbuild	Perform \"rmiall\" and delete IMAGE from configuration file"
		echo "	run		Run a background container from a configuration file"
		echo "	runtmp		Run a temporal container from a configuration file"
		echo "	conf		Get configuration file"
		echo "	start		Start a stopped container"
		echo "	attach		Attach to a running container"
		echo "	version		Display version"
		echo
		exit 1
		;;
esac

exit 0
