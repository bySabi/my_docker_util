## ripped from docker bash completion

__doquer_containers_exclude()
{
	local containers
	containers="$( doquer show -q )"
	COMPREPLY=( $( compgen -W "$containers" -- "$cur" ) )
}

__doquer_containers_all()
{
	local containers
	containers="$( docker ps -a -q )"
	COMPREPLY=( $( compgen -W "$containers" -- "$cur" ) )
}

__doquer_containers_running()
{
	local containers
	containers="$( docker ps -q )"
	COMPREPLY=( $( compgen -W "$containers" -- "$cur" ) )
}

__doquer_containers_running_notrunc()
{
	local containers
	containers="$( docker ps -notrunc -q )"
	COMPREPLY=( $( compgen -W "$containers" -- "$cur" ) )
}

__doquer_containers_stopped()
{
	local containers
	containers="$( comm -13 <(docker ps -q | sort -u) <(docker ps -a -q | sort -u) )"
	COMPREPLY=( $( compgen -W "$containers" -- "$cur" ) )
}

_doquer_lock()
{
	__doquer_containers_all
}

_doquer_unlock()
{
	__doquer_containers_exclude
}

_doquer_rmall()
{
	case "$cur" in
		*)
			COMPREPLY=( $( compgen -W "-f" -- "$cur" ) )
			;;
	esac
}

_doquer_rmiall()
{
	return
}

_doquer_integrity()
{
	return
}

_doquer_build()
{
	_filedir
}

_doquer_cleanbuild()
{
	_filedir
}

_doquer_run()
{
	case "$cur" in
		*)
			COMPREPLY=( $( compgen -W "--pipe" -- "$cur" ) )
			;;
	esac
}

_doquer_runtmp()
{
	case "$cur" in
		*)
			COMPREPLY=( $( compgen -W "--pipe" -- "$cur" ) )
			;;
	esac
}

_doquer_conf()
{
	_filedir
}

_doquer_attach()
{
	__doquer_containers_running_notrunc
}

_doquer_show()
{
	case "$cur" in
		*)
			COMPREPLY=( $( compgen -W "-q" -- "$cur" ) )
			;;
	esac
}

_doquer_version()
{
	return
}


_doquer()
{
	local cur prev words cword command="doquer" counter=1 word cpos
	local commands="
			lock
			unlock
			rmall
			rmiall
			integrity
			show
			build
			cleanbuild
			run
			runtmp
			conf
			attach
			version
	 "

	COMPREPLY=()
	_get_comp_words_by_ref -n : cur prev words cword

	while [ $counter -lt $cword ]; do
		word="${words[$counter]}"
			case "$word" in
				-H)
					(( counter++ ))
					;;
				-*)
					;;
				*)
					command="$word"
					cpos=$counter
					(( cpos++ ))
					break
					;;
			esac
		(( counter++ ))
	done

	local completions_func=_doquer_${command}
	declare -F $completions_func >/dev/null && $completions_func

	return 0
}

complete -F _doquer doquer
